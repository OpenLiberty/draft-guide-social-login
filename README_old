//  Copyright (c) 2020 IBM Corporation and others.
// Licensed under Creative Commons Attribution-NoDerivatives
// 4.0 International (CC BY-ND 4.0)
//   https://creativecommons.org/licenses/by-nd/4.0/
//
// Contributors:
//     IBM Corporation
//
:projectid: social-login
:page-layout: guide-multipane
:page-duration: 30 minutes
:page-releasedate: 2020-06-20
:page-essential: true
:page-essential-order: 1
:page-description: Learn how to authenticate users with the Open Liberty Social Media Login feature.
:guide-author: Open Liberty
:page-tags: ['Java EE', 'Jakarta EE', 'Security']
:page-related-guides: ['microprofile-jwt']
:page-permalink: /guides/{projectid}
:page-seo-title: Authenticating users with Social Media Login
:page-seo-description: A getting started tutorial with examples on how to secure Java applications by authenticating users through social media providers, such as GitHub, using the Open Liberty Social Media Login feature.
:common-includes: https://raw.githubusercontent.com/OpenLiberty/guides-common/master
= Authenticating users with Social Login

[.hidden]
NOTE: This repository contains the guide documentation source. To view the guide in published form, view it on the https://openliberty.io/guides/{projectid}.html[Open Liberty website^].

Learn how to authenticate users with the Open Liberty Social Media Login feature.

== What you'll learn

You will learn how to authenticate users to an existing service using Social Media Login.

Social Media Login provides a form of single sign-on (SSO) that enables users to sign in to a secured website by using
their existing social media account.
It simplifies the authentication process for end users and allows you to provide a secure authentication
method for your users without having to explicitly implement it.

The https://openliberty.io/docs/ref/feature/#socialLogin-1.0.html[Social Media Login Feature^] in Open Liberty
enables you to configure application authentication using one or more social media platforms,
including GitHub, LinkedIn, Facebook, Twitter and Google.
You can also create custom configuration for any other social media platform that implements
the https://oauth.net/2[OAuth 2.0^] or https://openid.net/connect[OpenID Connect 1.0^] standard for authorization.`

By the end of this guide, you will be able to authenticate users to your web service using GitHub.

// =================================================================================================
// Getting Started
// =================================================================================================
[role='command']
include::{common-includes}/gitclone.adoc[]

== Creating a GitHub OAuth2 Application

Obtain an OAuth 2.0 client ID and client secret credentials for accessing the GitHub developer API by registering
a new https://github.com/settings/developers[application^] in your https://github.com/[GitHub^] account.
On the Settings > Developer settings > OAuth Apps page of your account, register a new application.

Set the Homepage URL to `\https://localhost:9443` and
the Authorization callback URL to `\https://localhost:9443/ibm/api/social-login/redirect/githubLogin`.

When the registration is complete, the client ID and client secret credentials are displayed.
To provide your application with the credentials, export the following environment variables: `GITHUB_CLIENT_ID` and
`GITHUB_CLIENT_SECRET`.

Replace the values of `[github-client-id]` and `[github-client-secret]` in the following command.
include::{common-includes}/os-tabs.adoc[]
[.tab_content.mac_section.linux_section]
--
[role='command']
----
export GITHUB_CLIENT_ID=[github-client-id]
export GITHUB_CLIENT_SECRET=[github-client-secret]
----
--
[.tab_content.windows_section]
--
[role='command']
----
set GITHUB_CLIENT_ID=[github-client-id]
set GITHUB_CLIENT_SECRET=[github-client-secret]
----
--

== Configuring GitHub social media login

To enable social login, you will need to configure the configuration element for GitHub social media login.
`<githubLogin />`. There are some prerequisites to social media whose configurations have been provided for you.

=== Security role configuration

The [hotspot=applicationBnd]`<application-bnd />` configuration element under the
[hotspot=webApplication]`<webApplication />` configuration element creates a new security role [hotspot=users]`users`,
which all authenticated users belong to.
Adding this allows users that are authenticated using social media login to access your `HelloService` service.

=== Configuring keystore and SSL

The [hotspot=keystore]`<keyStore id="defaultKeyStore" .../>` configuration element
will be used to provide SSL certificates when initiating HTTPS connections for social media login.

The [hotspot=sslConfig]`<ssl id="defaultSSLConfig" .../>` configuration element, which references
[hotspot=keystore]`<keyStore id="defaultKeyStore" .../>` as the keystore, will be provided to social media login
configurations.

The `trustDefaultCerts` attribute of the [hotspot=sslConfig]`<ssl id="defaultSSLRef" .../>`
configuration element, set to true, allows the server to establish trust using the JDK default truststore,
instead of requiring you to create a truststore with the required certificates.
This allows you to send data securely to GitHub.

Replace the `server.xml` file to add the `socialLogin-1.0` feature declaration, which enables the use of social media
login in the application, and to add the `<githubLogin />` configuration.

[role="code_command hotspot file=0", subs="quotes"]
----
#Replace the server configuration file.#
`src/main/liberty/config/server.xml`
----

server.xml
[source, xml, linenums, role='code_column']
----
include::finish/src/main/liberty/config/server.xml[]
----

=== GitHub login configuration

The [hotspot=githubLogin]`<githubLogin />` configuration element will configure GitHub login.

The client ID and client secret for your GitHub OAuth2 application are injected into the
[hotspot=githubLogin]`<githubLogin />` configuration element with the values of `github.client.id` and
`github.client.secret`.
These values are supplied using the environment variables `GITHUB_CLIENT_ID` and `GITHUB_CLIENT_SECRET`.

//== Building the application

[role='command']
include::{common-includes}/devmode-build.adoc[]

Check out the service that you created at the
http://localhost:9080/api/hello.html[^] URL.


//== Creating a secured servlet
//
//The `hello.html` page contains a [hotspot=btnLogin file=2]`login` button that redirects to the
//[hotspot=login file=2]`/hello` endpoint.
//We will create a servlet to handle `GET` requests to this endpoint that requires that users be authenticated.
//When users access this endpoint by clicking on the `login` button, they will be prompted to authenticate using GitHub.
//
//First, navigate to the `start` directory.
//
//[role='command']
//include::{common-includes}/devmode-start.adoc[]
//
//[role="code_command hotspot file=0", subs="quotes"]
//----
//#Create the `HelloServlet` class.#
//`src/main/java/io/openliberty/guides/sociallogin/HelloServlet.java`
//----
//
//The [hotspot=WebServletImport hotspot=WebServlet file=0]`@WebServlet` annotation declares that the
//[hotspot=HelloServlet file=0]`HelloServlet` class, which must extend
//[hotspot=HttpServlet hotspot=HttpServletImport file=0]`HttpServlet`, is a servlet.
//
//The [hotspot=ServletSecurity hotspot=ServletSecurityImport file=0]`@ServletSecurity` annotation specifies the security
//constraints.
//The [hotspot=HttpConstraint hotspot=HttpConstraintImport file=0]`@HttpConstraint` annotation passed to the `value` element
//configures the constraint for all HTTP methods in this servlet.
//
//The [hotspot=rolesAllowed file=0]`rolesAllowed` element restricts the access to members of the `users` role.
//
//The [hotspot=doGet file=0]`doGet()` method handles GET requests to this servlet.
//The [hotspot=getUsername file=0]`username` of the user is added to the request as an attribute to be used by the
//[hotspot=username file=1]`securedHello.jsp` page, to which the request is [hotspot=forwardRequest]`forwarded`
//by the servlet.
//
//HelloServlet.java
//[source, Java, linenums, role='code_column hide_tags=copyright']
//----
//include::finish/src/main/java/io/openliberty/guides/sociallogin/HelloServlet.java[]
//----
//
//securedHello.jsp
//[source, html, linenums, role='code_column hide_tags=copyright']
//----
//include::finish/src/main/webapp/securedHello.jsp[]
//----
//
//hello.html
//[source ,html, linenums, role='code_column hide_tags=copyright']
//----
//include::finish/src/main/webapp/hello.html[]
//----

== Implementing logout

The [file=1]`securedHello.jsp` page contains a [hotspot=logout file=1]`logout` button that makes a `POST` request
to the [hotspot=WebServlet file=0]`/logout` endpoint.
We will create a servlet to handle [hostpot=handlePost file=0]`POST` requests to this endpoint.
This servlet requires that the user be authenticated.

[role="code_command", subs="quotes"]
----
#Create the `LogoutServlet` class.#
`src/main/java/io/openliberty/guides/sociallogin/HelloServlet.java`
----

The [hotspot=WebServlet file=0]`@WebServlet` and [hotspot=ServletSecurity file=0]`@ServletSecurity` annotations declare
that the [hotspot=LogoutServlet file=0]`LogoutServlet` class is a servlet that handles the
[hotspot=WebServlet file=0]`/logout` endpoint whose access is restricted to members of the role `users`.

Before the user is logged out of the application, the access token obtained by Social Login from the social media provider
as part of the authentication can be used to revoke user permissions for the application. When the user logs into the
application again, they will be prompted to authorize the application.

The [hotspot=clientId file=0]`client ID` and [hotspot=clientSecret file=0]`client secret` for your GitHub OAuth2
application are injected into [hotspot=LogoutServlet file=0]`LogoutServlet` with the values of
[hotspot=propClientId file=0]`github.client.id` and [hotspot=propClientSecret file=0]`github.client.secret` by
Microprofile Config.
These values are supplied using the environment variables `GITHUB_CLIENT_ID` and `GITHUB_CLIENT_SECRET`.

The access token is retrieved using the [hotspot=accessToken file=0]`UserProfileManager`.

Basic Authorization is used to access the [hotspot=unauthorizeUrl file=0]`url` to delete an application grant.
The username and password for basic authorization are the GitHub client ID and client secret.
To construct the authorization header, the client ID and client secret must be [hotspot=encodeAuth file=0]`encoded`.

The `DELETE` request to the [hotspot=unauthorizeUrl file=0]`unauthorizeUrl` is performed using the JAX-RS
[hotspot=revokePermissions file=0]`ClientBuilder`. The [hotspot=encodeAuth file=0]`encoded` client ID and
client secret are added to the request as an [hotspot=authHeader file=0]`Authorization: Basic ...` header.
The [hotspot=accessToken file=0]`access token` is sent as part of the
[hotspot=requestBody hotspot=accessTokenBody file=0]`request body`.

Lastly, the [hotspot=logout file=0]`HttpServletRequest#logout()` method is used to log the user out of the application, after which the user
is redirected to [hotspot=redirect file=0]`hello.html`.

LogoutServlet.java
[source, Java, linenums, role='code_column hide_tags=copyright']
----
include::finish/src/main/java/io/openliberty/guides/sociallogin/LogoutServlet.java[]
----

securedHello.jsp
[source, html, linenums, role='code_column hide_tags=copyright']
----
include::finish/src/main/webapp/securedHello.jsp[]
----

Try logging in using your social media account.
After authenticating, you will be redirected to `\https://localhost:9080/api/hello`.
When you click the `logout` button, you will be unauthenticated and redirected back to
http://localhost:9080/api/hello.html[^].

If you try logging in again, you will be asked to reauthorize your application with GitHub before being authenticated and
redirected to `\https://localhost:9080/api/hello`.

[role='command']
include::{common-includes}/devmode-quit.adoc[]

== Great work! You're done!

You secured a simple RESTful web service in Open Liberty by using the Social Media Login feature.

== Next Steps

As an exercise, configure a second social media provider, Facebook, for social media login for your application.
If more than one social media login provider is added, there’s a selection form presented to the user,
where all the possible social media providers configured in your application are shown for the user to pick from.

You can create the `<facebookLogin />` configuration element in `server.xml` to setup login for Facebook.
Similar to `<githubLogin />`, `<facebookLogin />` also only requires a client ID and client secret.
The following links to Facebook documentation will provide any additional information about setting up an OAuth2
application.

- https://developers.facebook.com/docs/apps#register[Registering for a Facebook application^]
- https://developers.facebook.com/docs/facebook-login/web#redirecturl[Adding Facebook Login to your Facebook Application^]
- https://developers.facebook.com/docs/facebook-login/permissions/requesting-and-revoking#revokelogin[Revoking Facebook Login^]

== Related Links

Learn more about MicroProfile.

https://microprofile.io/[See the MicroProfile specs^]

https://openliberty.io/docs/ref/microprofile[View the MicroProfile API^]


include::{common-includes}/attribution.adoc[subs="attributes"]
